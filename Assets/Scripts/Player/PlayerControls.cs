//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""SinglePlayer"",
            ""id"": ""a9b3a642-8b88-43a0-9c98-dd3e7a0bc22a"",
            ""actions"": [
                {
                    ""name"": ""MoveX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""db220abf-37f0-4d10-b686-1d4ee9e12d9e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveZ"",
                    ""type"": ""PassThrough"",
                    ""id"": ""11e55587-425b-4419-8055-302f63d687c5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveNeckX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9fcfb666-e7f7-4c6d-9157-895dfb73c176"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveNeckZ"",
                    ""type"": ""PassThrough"",
                    ""id"": ""54ccb5bd-d131-487a-b1ab-6d0152f47934"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a5f70794-aa01-4011-9f94-be61a744e832"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad;Body"",
                    ""action"": ""MoveX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6289ce3f-185c-4574-85a2-f7e3800cfc75"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad;Head"",
                    ""action"": ""MoveNeckX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d57d9b1-a855-4c4b-b5b8-f219410c1d42"",
                    ""path"": ""<Gamepad>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad;Body"",
                    ""action"": ""MoveZ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33a3993d-ce1a-4f8a-82ce-77a7d3e78d71"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad;Head"",
                    ""action"": ""MoveNeckZ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""22ad961f-59db-4701-a2cf-93f2bbf98cd9"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fa237dce-7293-4d65-a415-4a863c90aab7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NavigateMenu"",
                    ""type"": ""PassThrough"",
                    ""id"": ""555ed3e0-b3da-4f78-8c99-ca6fd6d1ac8a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FirstCharacter"",
                    ""type"": ""Button"",
                    ""id"": ""6939ea57-da2e-44ee-b0c0-2bf45cacd259"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondCharacter"",
                    ""type"": ""Button"",
                    ""id"": ""bb7a1c63-d451-4d31-a484-72765388057c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThirdCharacter"",
                    ""type"": ""Button"",
                    ""id"": ""6cd0043c-3a30-45cd-a713-c3d4b8335631"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FourthCharacter"",
                    ""type"": ""Button"",
                    ""id"": ""4a7bdd09-f8bb-429d-bf97-268aa198982a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b13d02b7-2e22-4fec-83a6-c7525bc685f7"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad;Body;Head"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2189845-0f53-42d2-8523-949772ac6b81"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad;Body;Head"",
                    ""action"": ""NavigateMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e97da7c-393b-4ea4-8e55-b321ccb6043c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad;Body;Head"",
                    ""action"": ""NavigateMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""462b75b6-d7ca-480f-816b-42ca3530591d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad;Body;Head"",
                    ""action"": ""FirstCharacter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98d3bf8d-3100-43f6-a292-17cbbd37a2a5"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad;Body;Head"",
                    ""action"": ""SecondCharacter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e85a5b0-6eeb-4418-a727-64cef126d16a"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad;Body;Head"",
                    ""action"": ""ThirdCharacter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83c490e8-24ad-48b1-b59d-2a2feed65aa5"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad;Body;Head"",
                    ""action"": ""FourthCharacter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Body"",
            ""bindingGroup"": ""Body"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Head"",
            ""bindingGroup"": ""Head"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // SinglePlayer
        m_SinglePlayer = asset.FindActionMap("SinglePlayer", throwIfNotFound: true);
        m_SinglePlayer_MoveX = m_SinglePlayer.FindAction("MoveX", throwIfNotFound: true);
        m_SinglePlayer_MoveZ = m_SinglePlayer.FindAction("MoveZ", throwIfNotFound: true);
        m_SinglePlayer_MoveNeckX = m_SinglePlayer.FindAction("MoveNeckX", throwIfNotFound: true);
        m_SinglePlayer_MoveNeckZ = m_SinglePlayer.FindAction("MoveNeckZ", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_Select = m_Menu.FindAction("Select", throwIfNotFound: true);
        m_Menu_NavigateMenu = m_Menu.FindAction("NavigateMenu", throwIfNotFound: true);
        m_Menu_FirstCharacter = m_Menu.FindAction("FirstCharacter", throwIfNotFound: true);
        m_Menu_SecondCharacter = m_Menu.FindAction("SecondCharacter", throwIfNotFound: true);
        m_Menu_ThirdCharacter = m_Menu.FindAction("ThirdCharacter", throwIfNotFound: true);
        m_Menu_FourthCharacter = m_Menu.FindAction("FourthCharacter", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SinglePlayer
    private readonly InputActionMap m_SinglePlayer;
    private List<ISinglePlayerActions> m_SinglePlayerActionsCallbackInterfaces = new List<ISinglePlayerActions>();
    private readonly InputAction m_SinglePlayer_MoveX;
    private readonly InputAction m_SinglePlayer_MoveZ;
    private readonly InputAction m_SinglePlayer_MoveNeckX;
    private readonly InputAction m_SinglePlayer_MoveNeckZ;
    public struct SinglePlayerActions
    {
        private @PlayerControls m_Wrapper;
        public SinglePlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveX => m_Wrapper.m_SinglePlayer_MoveX;
        public InputAction @MoveZ => m_Wrapper.m_SinglePlayer_MoveZ;
        public InputAction @MoveNeckX => m_Wrapper.m_SinglePlayer_MoveNeckX;
        public InputAction @MoveNeckZ => m_Wrapper.m_SinglePlayer_MoveNeckZ;
        public InputActionMap Get() { return m_Wrapper.m_SinglePlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SinglePlayerActions set) { return set.Get(); }
        public void AddCallbacks(ISinglePlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_SinglePlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SinglePlayerActionsCallbackInterfaces.Add(instance);
            @MoveX.started += instance.OnMoveX;
            @MoveX.performed += instance.OnMoveX;
            @MoveX.canceled += instance.OnMoveX;
            @MoveZ.started += instance.OnMoveZ;
            @MoveZ.performed += instance.OnMoveZ;
            @MoveZ.canceled += instance.OnMoveZ;
            @MoveNeckX.started += instance.OnMoveNeckX;
            @MoveNeckX.performed += instance.OnMoveNeckX;
            @MoveNeckX.canceled += instance.OnMoveNeckX;
            @MoveNeckZ.started += instance.OnMoveNeckZ;
            @MoveNeckZ.performed += instance.OnMoveNeckZ;
            @MoveNeckZ.canceled += instance.OnMoveNeckZ;
        }

        private void UnregisterCallbacks(ISinglePlayerActions instance)
        {
            @MoveX.started -= instance.OnMoveX;
            @MoveX.performed -= instance.OnMoveX;
            @MoveX.canceled -= instance.OnMoveX;
            @MoveZ.started -= instance.OnMoveZ;
            @MoveZ.performed -= instance.OnMoveZ;
            @MoveZ.canceled -= instance.OnMoveZ;
            @MoveNeckX.started -= instance.OnMoveNeckX;
            @MoveNeckX.performed -= instance.OnMoveNeckX;
            @MoveNeckX.canceled -= instance.OnMoveNeckX;
            @MoveNeckZ.started -= instance.OnMoveNeckZ;
            @MoveNeckZ.performed -= instance.OnMoveNeckZ;
            @MoveNeckZ.canceled -= instance.OnMoveNeckZ;
        }

        public void RemoveCallbacks(ISinglePlayerActions instance)
        {
            if (m_Wrapper.m_SinglePlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISinglePlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_SinglePlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SinglePlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SinglePlayerActions @SinglePlayer => new SinglePlayerActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private List<IMenuActions> m_MenuActionsCallbackInterfaces = new List<IMenuActions>();
    private readonly InputAction m_Menu_Select;
    private readonly InputAction m_Menu_NavigateMenu;
    private readonly InputAction m_Menu_FirstCharacter;
    private readonly InputAction m_Menu_SecondCharacter;
    private readonly InputAction m_Menu_ThirdCharacter;
    private readonly InputAction m_Menu_FourthCharacter;
    public struct MenuActions
    {
        private @PlayerControls m_Wrapper;
        public MenuActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_Menu_Select;
        public InputAction @NavigateMenu => m_Wrapper.m_Menu_NavigateMenu;
        public InputAction @FirstCharacter => m_Wrapper.m_Menu_FirstCharacter;
        public InputAction @SecondCharacter => m_Wrapper.m_Menu_SecondCharacter;
        public InputAction @ThirdCharacter => m_Wrapper.m_Menu_ThirdCharacter;
        public InputAction @FourthCharacter => m_Wrapper.m_Menu_FourthCharacter;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void AddCallbacks(IMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @NavigateMenu.started += instance.OnNavigateMenu;
            @NavigateMenu.performed += instance.OnNavigateMenu;
            @NavigateMenu.canceled += instance.OnNavigateMenu;
            @FirstCharacter.started += instance.OnFirstCharacter;
            @FirstCharacter.performed += instance.OnFirstCharacter;
            @FirstCharacter.canceled += instance.OnFirstCharacter;
            @SecondCharacter.started += instance.OnSecondCharacter;
            @SecondCharacter.performed += instance.OnSecondCharacter;
            @SecondCharacter.canceled += instance.OnSecondCharacter;
            @ThirdCharacter.started += instance.OnThirdCharacter;
            @ThirdCharacter.performed += instance.OnThirdCharacter;
            @ThirdCharacter.canceled += instance.OnThirdCharacter;
            @FourthCharacter.started += instance.OnFourthCharacter;
            @FourthCharacter.performed += instance.OnFourthCharacter;
            @FourthCharacter.canceled += instance.OnFourthCharacter;
        }

        private void UnregisterCallbacks(IMenuActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @NavigateMenu.started -= instance.OnNavigateMenu;
            @NavigateMenu.performed -= instance.OnNavigateMenu;
            @NavigateMenu.canceled -= instance.OnNavigateMenu;
            @FirstCharacter.started -= instance.OnFirstCharacter;
            @FirstCharacter.performed -= instance.OnFirstCharacter;
            @FirstCharacter.canceled -= instance.OnFirstCharacter;
            @SecondCharacter.started -= instance.OnSecondCharacter;
            @SecondCharacter.performed -= instance.OnSecondCharacter;
            @SecondCharacter.canceled -= instance.OnSecondCharacter;
            @ThirdCharacter.started -= instance.OnThirdCharacter;
            @ThirdCharacter.performed -= instance.OnThirdCharacter;
            @ThirdCharacter.canceled -= instance.OnThirdCharacter;
            @FourthCharacter.started -= instance.OnFourthCharacter;
            @FourthCharacter.performed -= instance.OnFourthCharacter;
            @FourthCharacter.canceled -= instance.OnFourthCharacter;
        }

        public void RemoveCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuActions @Menu => new MenuActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_BodySchemeIndex = -1;
    public InputControlScheme BodyScheme
    {
        get
        {
            if (m_BodySchemeIndex == -1) m_BodySchemeIndex = asset.FindControlSchemeIndex("Body");
            return asset.controlSchemes[m_BodySchemeIndex];
        }
    }
    private int m_HeadSchemeIndex = -1;
    public InputControlScheme HeadScheme
    {
        get
        {
            if (m_HeadSchemeIndex == -1) m_HeadSchemeIndex = asset.FindControlSchemeIndex("Head");
            return asset.controlSchemes[m_HeadSchemeIndex];
        }
    }
    public interface ISinglePlayerActions
    {
        void OnMoveX(InputAction.CallbackContext context);
        void OnMoveZ(InputAction.CallbackContext context);
        void OnMoveNeckX(InputAction.CallbackContext context);
        void OnMoveNeckZ(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnNavigateMenu(InputAction.CallbackContext context);
        void OnFirstCharacter(InputAction.CallbackContext context);
        void OnSecondCharacter(InputAction.CallbackContext context);
        void OnThirdCharacter(InputAction.CallbackContext context);
        void OnFourthCharacter(InputAction.CallbackContext context);
    }
}
