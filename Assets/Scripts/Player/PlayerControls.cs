//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""SinglePlayer"",
            ""id"": ""a9b3a642-8b88-43a0-9c98-dd3e7a0bc22a"",
            ""actions"": [
                {
                    ""name"": ""MoveX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""db220abf-37f0-4d10-b686-1d4ee9e12d9e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveZ"",
                    ""type"": ""PassThrough"",
                    ""id"": ""11e55587-425b-4419-8055-302f63d687c5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveNeck"",
                    ""type"": ""Value"",
                    ""id"": ""9fcfb666-e7f7-4c6d-9157-895dfb73c176"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a5f70794-aa01-4011-9f94-be61a744e832"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MoveX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6289ce3f-185c-4574-85a2-f7e3800cfc75"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MoveNeck"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d57d9b1-a855-4c4b-b5b8-f219410c1d42"",
                    ""path"": ""<Gamepad>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MoveZ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // SinglePlayer
        m_SinglePlayer = asset.FindActionMap("SinglePlayer", throwIfNotFound: true);
        m_SinglePlayer_MoveX = m_SinglePlayer.FindAction("MoveX", throwIfNotFound: true);
        m_SinglePlayer_MoveZ = m_SinglePlayer.FindAction("MoveZ", throwIfNotFound: true);
        m_SinglePlayer_MoveNeck = m_SinglePlayer.FindAction("MoveNeck", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SinglePlayer
    private readonly InputActionMap m_SinglePlayer;
    private List<ISinglePlayerActions> m_SinglePlayerActionsCallbackInterfaces = new List<ISinglePlayerActions>();
    private readonly InputAction m_SinglePlayer_MoveX;
    private readonly InputAction m_SinglePlayer_MoveZ;
    private readonly InputAction m_SinglePlayer_MoveNeck;
    public struct SinglePlayerActions
    {
        private @PlayerControls m_Wrapper;
        public SinglePlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveX => m_Wrapper.m_SinglePlayer_MoveX;
        public InputAction @MoveZ => m_Wrapper.m_SinglePlayer_MoveZ;
        public InputAction @MoveNeck => m_Wrapper.m_SinglePlayer_MoveNeck;
        public InputActionMap Get() { return m_Wrapper.m_SinglePlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SinglePlayerActions set) { return set.Get(); }
        public void AddCallbacks(ISinglePlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_SinglePlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SinglePlayerActionsCallbackInterfaces.Add(instance);
            @MoveX.started += instance.OnMoveX;
            @MoveX.performed += instance.OnMoveX;
            @MoveX.canceled += instance.OnMoveX;
            @MoveZ.started += instance.OnMoveZ;
            @MoveZ.performed += instance.OnMoveZ;
            @MoveZ.canceled += instance.OnMoveZ;
            @MoveNeck.started += instance.OnMoveNeck;
            @MoveNeck.performed += instance.OnMoveNeck;
            @MoveNeck.canceled += instance.OnMoveNeck;
        }

        private void UnregisterCallbacks(ISinglePlayerActions instance)
        {
            @MoveX.started -= instance.OnMoveX;
            @MoveX.performed -= instance.OnMoveX;
            @MoveX.canceled -= instance.OnMoveX;
            @MoveZ.started -= instance.OnMoveZ;
            @MoveZ.performed -= instance.OnMoveZ;
            @MoveZ.canceled -= instance.OnMoveZ;
            @MoveNeck.started -= instance.OnMoveNeck;
            @MoveNeck.performed -= instance.OnMoveNeck;
            @MoveNeck.canceled -= instance.OnMoveNeck;
        }

        public void RemoveCallbacks(ISinglePlayerActions instance)
        {
            if (m_Wrapper.m_SinglePlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISinglePlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_SinglePlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SinglePlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SinglePlayerActions @SinglePlayer => new SinglePlayerActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface ISinglePlayerActions
    {
        void OnMoveX(InputAction.CallbackContext context);
        void OnMoveZ(InputAction.CallbackContext context);
        void OnMoveNeck(InputAction.CallbackContext context);
    }
}
